resources
=========
- official document (hard to read)
  https://en.cppreference.com/w/cpp/atomic/memory_order
- C/C++11 mappings to processors
  https://www.cl.cam.ac.uk/~pes20/cpp/cpp0xmappings.html
- Herb Sutter - atomic Weapons
  https://www.youtube.com/watch?v=A8eCGOqgvH4
  https://www.youtube.com/watch?v=KeLBd2EJLOU
- Herb Sutter - lock free programming
  https://www.youtube.com/watch?v=c1gO9aB9nbs
  https://www.youtube.com/watch?v=CmxkPChOcvw


compare & exchange (val)
========================

Guarantees:
- only one thread will set v to new_v on concurrency
- oldv will always reflect latest v globally

sync
----

old_v = __sync_val_compare_and_swap(&v, expected_v, new_v);

again:
    old_v = v;
    if (v == expected_v) {
        if (v changed) goto again; else v = new_v;
    }

atomic
------

old_v = expected_v;
__atomic_compare_exchange_n(&v, &old_v, new_v, false, __ATOMIC_RELAXED, __ATOMIC_RELAXED);

    old_v = expected_v;
again:
    if (v == old_v) {
        if (v changed) goto again; else v = new_v;
    } else {
        old_v = v;
    }


compare & exchange (bool)
=========================

bool ret = __sync_bool_compare_and_swap(&v, expected_v, new_v);

old_v = expected_v;
bool ret = __atomic_compare_exchange_n(&v, &old_v, new_v, ....);

Guarantees:
- only one thread will set v to new_v and return true on concurrency.
