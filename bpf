bpf helpers
===========
https://man7.org/linux/man-pages/man7/bpf-helpers.7.html
https://github.com/torvalds/linux/blob/master/include/uapi/linux/bpf.h


print parent process info when new process created
==================================================
#!/usr/bin/env bpftrace

#include <linux/sched.h>

BEGIN
{
    printf("Show parent process do fork...\n");
}

kprobe:__arm64_sys_clone
{
    printf("PID: %d, CMD: %s;\tPPID: %d, Parent CMD: %s\n",
        pid, comm, curtask->real_parent->pid, curtask->real_parent->comm);
}


trace user function latency
===========================
#!/usr/bin/env bpftrace

uprobe:/lib/x86_64-linux-gnu/libc.so.6:pthread_cond_signal
{
    @start_time[tid] = nsecs;
}

uretprobe:/lib/x86_64-linux-gnu/libc.so.6:pthread_cond_signal
/@start_time[tid]/
{
    @latency[comm, tid] = hist(nsecs - @start_time[tid]);
    delete(@start_time[tid]);
}

interval:s:5
{
    print("==============================================================\n");
    print(@latency);
    clear(@latency);
}


case study: trace kernel function tcp_sendmsg
=============================================

requirement
-----------
- how many calls per second
- distribution of packet sizes

check tcp_sendmsg args
----------------------
- install kernel debug symbol and source code
- inspect tcp_sendmsg args
  $ sudo perf probe -V tcp_sendmsg -s /usr/source/linux-source-version
    Available variables at tcp_sendmsg
            @<tcp_sendmsg+0>
                    size_t  size
                    struct msghdr*  msg
                    struct sock*    sk
- check source code
  * get function address
    $ nm path-to-vmlinux-dbg | grep tcp_sendmsg
  * get source code and line
    $ addr2line -e path-to-vmlinux-dbg <address>

trace packet size distribution
------------------------------
sudo bpftrace -e '
    k:tcp_sendmsg /pid == <CLIENT-PID>/ {
        @size = hist(arg2);
    }

    interval:s:5 {
        exit();
    }
'

trace invocations
-----------------
sudo bpftrace -e '
    kprobe:tcp_sendmsg /pid == <CLIENT-PID>/ {
        @start[tid] = nsecs;
    }

    kretprobe:tcp_sendmsg /pid == <CLIENT-PID> && @start[tid]/ {
        $latency = nsecs - @start[tid];
        @latency_hist = hist($latency);
        delete(@start[tid]);
    }

    interval:s:5 {
        print(@latency_hist);
        clear(@latency_hist);
        exit();
    }
'


trace memcpy size
=================
CAVEAT: trace libc.so.6:memcpy directly doesn't work

- wrap memcpy in a so
$ cat memcpy.c
#define _GNU_SOURCE
#include <stdio.h>
#include <string.h>
#include <dlfcn.h>

void *memcpy(void *dest, const void *src, size_t n) {
    static void *(*libc_memcpy)(void *, const void *, size_t) = NULL;

    if (!libc_memcpy)
        libc_memcpy = (void *(*)(void *, const void *, size_t))dlsym(RTLD_NEXT, "memcpy");

    return libc_memcpy(dest, src, n);
}

$ gcc -g -O2 -shared -fPIC -o memcpy.so memcpy.c

$ sudo bpftrace -e '
uprobe:./memcpy.so:memcpy {
    @sizes = hist(arg2);
}
interval:s:5 {
    print(@sizes);
    clear(@sizes);
}'

$ LD_PRELOAD=./memcpy.so workload
