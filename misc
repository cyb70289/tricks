dynamic lib
===========
https://www.technovelty.org/linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html


find threads belong to same physical core
=========================================
- https://github.com/DPDK/dpdk/blob/master/usertools/cpu_layout.py
- https://unix.stackexchange.com/questions/57920/how-do-i-know-which-processors-are-physical-cores


git send-email
==============
- sudo apt install git-email
- .git/config
  [sendemail]
    smtpuser = yibcai01
    smtpserver = foss.arm.com
    smtpencryption = tls
    smtpserverport = 587
    to = seastar-dev@googlegroups.com
    suppresscc = self
- send latest 3 commits from current branch
  $ git send-email -3 -v1 --annotate --cc <other-email> [--dry-run]


iommu+vfio
==========
- https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF
- https://www.kernel.org/doc/Documentation/vfio.txt

- https://www.linux-kvm.org/images/5/54/01x04-Alex_Williamson-An_Introduction_to_PCI_Device_Assignment_with_VFIO.pdf
- https://www.net.in.tum.de/fileadmin/bibtex/publications/theses/2019-ixy-iommu.pdf


hugepage
========
- alloate hugepages
  echo 2048 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages
- per node hugepage
  /sys/devices/system/node/[node_id]/hugepages/hugepages-2048kB/nr_hugepages


gcc arch details
================
gcc -march=native -Q --help=target | grep march


ss
==
server
------
wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh
cient
-----
https://www.linuxbabe.com/ubuntu/shadowsocks-libev-proxy-server-ubuntu-16-04-17-10

enable pr_debug
===============
https://www.quora.com/How-do-I-enable-pr_debug-in-Linux-Kernel

- build kernel with CONFIG_DYNAMIC_DEBUG=y
- search wanted file:line by "cat /sys/kernel/debug/dynamic_debug/control"
- echo 'file drivers/dax/super.c line 178 +p' > control
- check log at dmesg

or

- set printk loglevel to 8 (/proc/sys/kernel/printk)


mysql authentication issue
==========================
[mysqld]
default_authentication_plugin=mysql_native_password


find
====
find specific files in current dir and subdir, but ignore some dirs
$ find . \( -name "*.[hc]" -o -name "*.cc" \) -not -path "./build/*"
$ find . \( -name "*.[hc]" -o -name "*.cc" -o -name "*.ic" \) \( -not -path "./output/*" -and -not -path "./.git/*" -and -not -path "./output-debug/*" \)


cscope
======
- navigate system headers files
  $ cscope `find /usr/include -type f` -f syshdr.out
  $ cscope -f syshdr.out -d

- generate db for specific files
  $ cd mysql-server
  $ cscope `find . \( -name "*.[hc]" -o -name "*.cc" -o -name "*.ic" \) \( -not -path "./output/*" -and -not -path "./.git/*" -and -not -path "./output-debug/*" \)`
  $ mv cscope.out output/
  $ cd output
  $ cscope -d -P ..


qemu user
========
- https://www.ecliptik.com/Cross-Building-and-Running-Multi-Arch-Docker-Images/
- steps
  $ sudo apt install qemu-user-static binfmt-support
  $ docker run -it --rm -v /usr/bin/qemu-s390x-static:/usr/bin/qemu-s390x-static multiarch/ubuntu-core:s390x-focal

uefi
====
bcfg boot add 0 fs0:\EFI\ubuntu\grubaa64.efi ubuntu


https
=====
https://robertheaton.com/2014/03/27/how-does-https-actually-work/


gdb
===
- save history commands
  echo 'set history save on' >> ~/.gdbinit && chmod 600 ~/.gdbinit
- skip stl headers in single step debugging
  https://stackoverflow.com/a/42721326/6837980

get cache size
==============
for i in $(find /sys/devices/system/cpu/cpu0/cache -type f ); do echo $i -- $(cat $i); done

https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/ABI/testing/sysfs-devices-system-cpu


pre-defined compiler macros
===========================
https://sourceforge.net/p/predef/wiki/Architectures/


github proxy
============
append to ~/.ssh/config
Host github.com
    Hostname        ssh.github.com
    Port            443
    User            git
    ProxyCommand    nc -x 127.0.0.1:7890 %h %p


vim copy more than 50 lines
===========================
:set viminfo-=<50,s10
https://stackoverflow.com/questions/3676855/vim-limited-line-memory


install golang
==============
# sudo rm -rf /usr/local/go
GOVERSION=1.15
URL=https://dl.google.com/go/
[ "$(uname -m)" == "aarch64" ] && ARCH=arm64 || ARCH=amd64
GOPKG=go${GOVERSION}.linux-${ARCH}.tar.gz
curl -sL ${URL}/${GOPKG} | sudo tar -C /usr/local -xzf -
export PATH=${PATH}:/usr/local/go/bin


Modify other's PR
=================
https://tighten.co/blog/adding-commits-to-a-pull-request/


output redirection on ssh-ed host
=================================
# echo 3 > /proc/sys/vm/drop_caches
echo 3 | ssh remote-host sudo tee /proc/sys/vm/drop_caches


set cpu frequency
=================
sudo cpupower frequency-set -g performance
sudo cpupower -c 79 frequency-set --max 3GHz
cpupower -c 79 frequency-info
sudo cpufreq-set -c 1 -u 2.8GHz
cpufreq-info -c 1

echo performance | sudo sh -c 'tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor'


set optimization level
======================
#pragma GCC push_options
#pragma GCC optimize(2)
void f() {}
#pragma GCC pop_options

__attribute__ ((optimize(3))) void f() {}


disable loop vectorize for specific code
========================================
clang
-----
void f() {
  #pragma clang loop vectorize(disable)
  for (int i = 0; i < n; ++i) { ... }
}

gcc pragma
----------
#pragma GCC push_options
#pragma GCC optimize("no-tree-vectorize")
void f() { ... }
#pragma GCC pop_options

__attribute__((optimize("no-tree-vectorize")))
void f() { .... }


list compiler predefined macros
===============================
gcc -dM -E -x c /dev/null
gcc -dM -E -O3 -x c++ /dev/null
cl /EP /Zc:preprocessor /PD empty.cpp 2>nul


clang on windows: undefined symbol __divti3
===========================================
clang --rtlib=compiler-rt test.c
clang-cl /clang:"--rtlib=compiler-rt" test.c


ipmi
====
ipmitool -H <host> -I lanplus -U <user> -P <pass> chassis power on/off/status
ipmitool -H <host> -I lanplus -U <user> -P <pass> sol activate/deactivate


check enabled optimizations per '-O?'
====================================
https://stackoverflow.com/a/15548189/6837980
$ gcc -Q -O2 --help=optimizers
$ llvm-as-12 < /dev/null | opt-12 -O2 -disable-output -debug-pass=Arguments


list compiler predefined macros
===============================
$ echo "int;" | gcc -dM -E -
$ echo "int;" | clang -dM -E -


tcsh set locale
===============
- list all locale
  > locale -a
- check current locale
  > locale charmap
- change locale
  > setenv LC_ALL en_US.utf8


init dev
========
bash <(curl -sL https://raw.githubusercontent.com/cyb70289/tricks/master/dotfiles/init-dev.sh)


gcc keep frame pointer
======================
-fno-omit-frame-pointer
-mno-omit-leaf-frame-pointer


run gui in docker
=================
docker run -it --rm --net host -e DISPLAY=$DISPLAY -v /tmp/.X11-unix/:/tmp/.X11-unix ubuntu:22.04 bash

in container: copy host:~/.Xauthority to /root/.Xauthority


clangd to read kernel source
============================
- build kernel with clang
  * make CC=clang defconfig
  * optionally, select wanted modules by "make CC=clang menuconfig"
  * make CC=clang -j7
- scripts/clang-tools/gen_compile_commands.py [sub-dirs]
