dynamic lib
===========
https://www.technovelty.org/linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html


find threads belong to same physical core
=========================================
- https://github.com/DPDK/dpdk/blob/master/usertools/cpu_layout.py
- https://unix.stackexchange.com/questions/57920/how-do-i-know-which-processors-are-physical-cores


git send-email
==============
- sudo apt install git-email
- .git/config
  [sendemail]
    smtpuser = yibcai01
    smtpserver = foss.arm.com
    smtpencryption = tls
    smtpserverport = 587
    to = seastar-dev@googlegroups.com
    suppresscc = self
- send latest 3 commits from current branch
  $ git send-email -3 -v1 --annotate --cc <other-email> [--dry-run]


iommu+vfio
==========
- https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF
- https://www.kernel.org/doc/Documentation/vfio.txt

- https://www.linux-kvm.org/images/5/54/01x04-Alex_Williamson-An_Introduction_to_PCI_Device_Assignment_with_VFIO.pdf
- https://www.net.in.tum.de/fileadmin/bibtex/publications/theses/2019-ixy-iommu.pdf


hugepage
========
- alloate hugepages at runtime
  echo 2048 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages
  # per node
  echo 8 > /sys/devices/system/node/node0/hugepages/hugepages-1048576kB/nr_hugepages
- allocate hugepages at boottime
  GRUB_CMDLINE_LINUX="hugepagesz=1G hugepages=8"
- mount hugepage per pagesize
  mount -t hugetlbfs nodev -o pagesize=1G /mnt/huge1g
- use hugepage
  int fd = open("/mnt/huge1g/tmpfile", O_RDWR | O_CREAT);
  void* addr = mmap(NULL, 1024*1024*1024, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
- check processes using hugepages
  https://access.redhat.com/solutions/320303
  grep "KernelPageSize:     2048 kB" /proc/[[:digit:]]*/smaps | awk {'print $1'} | cut -d "/" -f3 | sort | uniq
  grep -B 11 'KernelPageSize:     2048 kB' /proc/[PID]/smaps | grep "^Size:" | awk 'BEGIN{sum=0}{sum+=$2}END{print sum/1024}'


gcc arch details
================
gcc -march=native -Q --help=target | grep march


ss
==
server
------
wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh
cient
-----
https://www.linuxbabe.com/ubuntu/shadowsocks-libev-proxy-server-ubuntu-16-04-17-10

enable pr_debug
===============
https://www.quora.com/How-do-I-enable-pr_debug-in-Linux-Kernel

- build kernel with CONFIG_DYNAMIC_DEBUG=y
- search wanted file:line by "cat /sys/kernel/debug/dynamic_debug/control"
- echo 'file drivers/dax/super.c line 178 +p' > control
- check log at dmesg

or

- set printk loglevel to 8 (/proc/sys/kernel/printk)


mysql authentication issue
==========================
[mysqld]
default_authentication_plugin=mysql_native_password


find
====
find specific files in current dir and subdir, but ignore some dirs
$ find . \( -name "*.[hc]" -o -name "*.cc" \) -not -path "./build/*"
$ find . \( -name "*.[hc]" -o -name "*.cc" -o -name "*.ic" \) \( -not -path "./output/*" -and -not -path "./.git/*" -and -not -path "./output-debug/*" \)


cscope
======
- navigate system headers files
  $ cscope `find /usr/include -type f` -f syshdr.out
  $ cscope -f syshdr.out -d

- generate db for specific files
  $ cd mysql-server
  $ cscope `find . \( -name "*.[hc]" -o -name "*.cc" -o -name "*.ic" \) \( -not -path "./output/*" -and -not -path "./.git/*" -and -not -path "./output-debug/*" \)`
  $ mv cscope.out output/
  $ cd output
  $ cscope -d -P ..


qemu user
========
- https://www.ecliptik.com/Cross-Building-and-Running-Multi-Arch-Docker-Images/
- steps
  $ sudo apt install qemu-user-static binfmt-support
  $ docker run -it --rm -v /usr/bin/qemu-s390x-static:/usr/bin/qemu-s390x-static multiarch/ubuntu-core:s390x-focal

uefi
====
bcfg boot add 0 fs0:\EFI\ubuntu\grubaa64.efi ubuntu


https
=====
https://robertheaton.com/2014/03/27/how-does-https-actually-work/


gdb
===
- save history commands
  echo 'set history save on' >> ~/.gdbinit && chmod 600 ~/.gdbinit
- skip stl headers in single step debugging
  https://stackoverflow.com/a/42721326/6837980

get cache size
==============
for i in $(find /sys/devices/system/cpu/cpu0/cache -type f ); do echo $i -- $(cat $i); done

https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/ABI/testing/sysfs-devices-system-cpu


pre-defined compiler macros
===========================
https://sourceforge.net/p/predef/wiki/Architectures/


github proxy
============
append to ~/.ssh/config
Host github.com
    Hostname        ssh.github.com
    Port            443
    User            git
    ProxyCommand    nc -x 127.0.0.1:7890 %h %p


vim copy more than 50 lines
===========================
:set viminfo-=<50,s10
https://stackoverflow.com/questions/3676855/vim-limited-line-memory


install golang
==============
# sudo rm -rf /usr/local/go
GOVERSION=1.15
URL=https://dl.google.com/go/
[ "$(uname -m)" == "aarch64" ] && ARCH=arm64 || ARCH=amd64
GOPKG=go${GOVERSION}.linux-${ARCH}.tar.gz
curl -sL ${URL}/${GOPKG} | sudo tar -C /usr/local -xzf -
export PATH=${PATH}:/usr/local/go/bin


Modify other's PR
=================
https://tighten.co/blog/adding-commits-to-a-pull-request/


output redirection on ssh-ed host
=================================
# echo 3 > /proc/sys/vm/drop_caches
echo 3 | ssh remote-host sudo tee /proc/sys/vm/drop_caches


set cpu frequency
=================
sudo cpupower frequency-set -g performance
sudo cpupower -c 79 frequency-set --max 3GHz
cpupower -c 79 frequency-info
sudo cpufreq-set -c 1 -u 2.8GHz
for c in `seq 0 79`; do sudo cpufreq-set -c $c -u 2.8GHz; done
cpufreq-info -c 1

echo performance | sudo sh -c 'tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor'
for c in `seq 0 79`; do sudo cpufreq-set -c $c -g performance; done

https://www.hammerdb.com/blog/uncategorized/hammerdb-best-practice-for-postgresql-performance-and-scalability/
x86_energy_perf_policy


set optimization level
======================
#pragma GCC push_options
#pragma GCC optimize(2)
void f() {}
#pragma GCC pop_options

__attribute__ ((optimize(3))) void f() {}


disable loop vectorize for specific code
========================================
clang
-----
void f() {
  #pragma clang loop vectorize(disable)
  for (int i = 0; i < n; ++i) { ... }
}

gcc pragma
----------
#pragma GCC push_options
#pragma GCC optimize("no-tree-vectorize")
void f() { ... }
#pragma GCC pop_options

__attribute__((optimize("no-tree-vectorize")))
void f() { .... }


list compiler predefined macros
===============================
https://godbolt.org/z/rxd3Th1KP
- gcc -dM -E -x c /dev/null
- gcc -dM -E -O3 -x c++ /dev/null
- cl /EP /Zc:preprocessor /PD empty.cpp 2>nul


clang on windows: undefined symbol __divti3
===========================================
clang --rtlib=compiler-rt test.c
clang-cl /clang:"--rtlib=compiler-rt" test.c


ipmi
====
ipmitool -H <host> -I lanplus -U <user> -P <pass> chassis power on/off/status
ipmitool -H <host> -I lanplus -U <user> -P <pass> sol activate/deactivate


check enabled optimizations per '-O?'
====================================
https://stackoverflow.com/a/15548189/6837980
$ gcc -Q -O2 --help=optimizers
$ llvm-as-12 < /dev/null | opt-12 -O2 -disable-output -debug-pass=Arguments


list compiler predefined macros
===============================
$ echo "int;" | gcc -dM -E -
$ echo "int;" | clang -dM -E -


list gcc header file search path
================================
$ echo | gcc -E -Wp,-v -


tcsh set locale
===============
- list all locale
  > locale -a
- check current locale
  > locale charmap
- change locale
  > setenv LC_ALL en_US.utf8


init dev
========
bash <(curl -sL https://raw.githubusercontent.com/cyb70289/tricks/master/dotfiles/init-dev.sh)


gcc keep frame pointer
======================
-fno-omit-frame-pointer
-mno-omit-leaf-frame-pointer


run gui in docker
=================
docker run -it --rm --net host -e DISPLAY=$DISPLAY -v /tmp/.X11-unix/:/tmp/.X11-unix ubuntu:22.04 bash

in container: copy host:~/.Xauthority to /root/.Xauthority


clangd to read kernel source
============================
- build kernel with clang
  * make CC=clang defconfig
  * optionally, select wanted modules by "make CC=clang menuconfig"
  * make CC=clang -j7
- scripts/clang-tools/gen_compile_commands.py [sub-dirs]


gerrit
======
- edit project.config
  https://stackoverflow.com/questions/22229536/edit-project-config-in-a-gerrit-project
- disable require signed-off-by
  * edit project.config
    [receive]
    requireSignedOffBy = false
- enable -o skip-valiation
  * https://gerrit-review.googlesource.com/Documentation/user-upload.html#skip_validation
  * add access to "ref/*"


ramdisk
=======
mount -t tmpfs -o size=2g tmpfs /mnt/rd/


bind thread to core
===================
# bind to core-12
taskset -p -c 12 <TID>


use hugepage for code
=====================
https://github.com/intel/iodlr
https://easyperf.net/blog/2022/09/01/Utilizing-Huge-Pages-For-Code


show call stack at runtim
=========================
eu-stack -p <pid>


valgrind callgrind
==================
https://developer.mantidproject.org/ProfilingWithValgrind.html

valgrind --tool=callgrind --instr-atstart=no --collect-atstart=no --separate-threads=yes \
         mysqld ......

stop mysqld gracefully use mysql client, otherwise logs won't be written to callgrind.pid


disassemble specific function in a binary
=========================================
$ nm -C mysqld |  grep buf_block_from_ahi
00000000022439c0 T buf_block_from_ahi(unsigned char const*)

$ objdump -dC --start-address=0x00000000022439c0 mysqld | less


print matched substrings in a string
====================================
echo '100*((${r3e}/(${r11}*8))-(${r10}/${r11}))' | grep -o 'r[0-9a-f]\+'
r3e
r11
r10
r11


Use newline as IFS
==================
IFS=$'\n'


software optimization
=====================
https://www.anger.org
https://www.agner.org/optimize/instruction_tables.pdf


override acpi table
===================
Follow kernel document:
* https://www.kernel.org/doc/Documentation/acpi/initrd_table_override.txt
* MUST increase table version!!
      DefinitionBlock ("", "DSDT", 2, "ARMLTD", "LTSOC   ", 0x20181101) --> 0x20181102

Reference archlinux doc:
* https://wiki.archlinux.org/title/DSDT


get function size
=================
nm --print-size --size-sort --radix=d elf-binary-file


arm cache maintenace
====================
https://developer.arm.com/documentation/ddi0500/j/System-Control/AArch64-register-summary/AArch64-cache-maintenance-operations

invalidate all icache
---------------------
asm volatile("dsb   ish"     : : : "memory");
asm volatile("ic    ialluis" : : : "memory");
asm volatile("dsb   ish"     : : : "memory");
asm volatile("isb"           : : : "memory");

invalidate icache by line
-------------------------
asm volatile("dsb   ish" : : : "memory");
for (unsigned long address = start; address < end; address += 64) {
    asm volatile ("ic    ivau, %0"
        :
        : "r" (address)
        : "memory");
}
asm volatile("dsb   ish" : : : "memory");
asm volatile("isb"       : : : "memory");
